import numpy as np

def sabr_forecast(F0, sigma0, rho, num_simulations, num_days):
    dt = 1  # Time step is set to 1 day
    F_forecast = np.zeros((num_simulations, num_days))
    F_forecast[:, 0] = F0
    sigma = sigma0

    for sim in range(num_simulations):
        dW = np.random.normal(size=num_days)
        dZ = rho * dW
        for day in range(1, num_days):
            F_forecast[sim, day] = F_forecast[sim, day-1] + dW[day-1] * sigma * F_forecast[sim, day-1]**0

        # Update sigma for the next simulation
        sigma += dZ.mean() * sigma * dt

    return F_forecast

# Example usage
F0 = 100  # Initial forward value
sigma0 = 0.2  # Initial volatility
rho = -0.5  # Correlation coefficient
num_simulations = 500  # Number of independent runs
num_days = 365  # Number of days

forecast_results = sabr_forecast(F0, sigma0, rho, num_simulations, num_days)
